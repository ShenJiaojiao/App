apply plugin: 'com.android.application'
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.5"
//    reportsDir = file("$buildDir/reports/coverage")
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.1"
    defaultConfig {
        applicationId "com.example.sample1"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
//        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'//instrument设置
    }
    buildTypes {
//        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//        }
        debug {
            /**打开覆盖率统计开关*/
            testCoverageEnabled = true
        }
    }
}

//dependencies {
//    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    implementation 'androidx.appcompat:appcompat:1.0.2'
//    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
//    testImplementation 'junit:junit:4.12'
//    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
//}

def coverageSourceDirs = [
        '../app/src/main/java/'
]

task jacocoTestReport(type: JacocoReport) {
    println "aa"
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = true
//        html.destination "${buildDir}/reports/jacoco/html"

    }

    classDirectories.from = fileTree(
            dir: './build/intermediates/javac/debug',
            excludes: ['**/R*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ])
//    classDirectories.setFrom(files(classDirectories.files.collect {
//        fileTree(dir:'./build/intermediates/javac/debug/classes',
//                excludes: ['**/R$*.class',
//                           '**/*$InjectAdapter.class',
//                           '**/*$ModuleAdapter.class',
//                           '**/*$ViewInjector*.class'
//                ])
//    }))
    sourceDirectories.from = files([coverageSourceDirs])
//    executionData.from files("$buildDir/outputs/code_coverage/connected/coverage.ec")
    executionData.from = files("$buildDir/outputs/code_coverage/connected/coverage.ec")


    doFirst {
//        new File("$buildDir/intermediates/app_classes/").eachFileRecurse { file ->
        new File("$buildDir/intermediates/javac/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.3.0'
//    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
}
